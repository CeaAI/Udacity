version: '3.7'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    hostname: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_TICK_TIME: 2000

  # zoo2:
  #   image: confluentinc/cp-zookeeper:latest
  #   restart: always
  #   hostname: zoo2
  #   ports:
  #     - 2182:2181
  #   environment:
  #     ZOOKEEPER_SERVER_ID: 2
  #     ZOOKEEPER_CLIENT_PORT: "2181"
  # zoo3:
  #   image: confluentinc/cp-zookeeper:latest
  #   restart: always
  #   hostname: zoo3
  #   ports:
  #     - 2183:2181
  #   environment:
  #     ZOOKEEPER_SERVER_ID: 3
  #     ZOOKEEPER_CLIENT_PORT: "2181"

  
  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
    - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_LOG_DIR: "~/kafka/logs/kafka-logs"
      KAFKA_NUM_PARTITION: 1
    depends_on:
    - "zookeeper"
    # - "zoo2"
    # - "zoo3"

  # kafka2:
  #   image: confluentinc/cp-kafka:latest
  #   ports:
  #   - "9093:9092"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: "zoo2:2181,zoo2:2181,zoo3:2181"
  #     KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka2:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092"
  #     KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
  #     KAFKA_LOG_DIR: "~/kafka/logs/kafka-logs"
  #     KAFKA_NUM_PARTITION: 2
  #   depends_on:
  #   - "zoo1"
  #   - "zoo2"
  #   - "zoo3"

  # kafka3:
  #   image: confluentinc/cp-kafka:latest
  #   ports:
  #   - "9094:9092"
  #   environment:
  #     KAFKA_BROKER_ID: 2
  #     KAFKA_ZOOKEEPER_CONNECT: "zoo3:2181,zoo2:2181,zoo3:2181"
  #     KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka3:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092"
  #     KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
  #     KAFKA_LOG_DIR: "~/kafka/logs/kafka-logs"
  #     KAFKA_NUM_PARTITION: 2
  #   depends_on:
  #   - "zoo1"
  #   - "zoo2"
  #   - "zoo3"

  schema-registry:
    image: confluentinc/cp-schema-registry:5.2.2
    ports:
    - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://localhost:9092"
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: "1"
    depends_on:
    - "kafka"
    - "zookeeper"
    # - "kafka2"
    # - "kafka3"

  rest-proxy:
    image: confluentinc/cp-kafka-rest:5.2.2
    ports:
    - "8082:8082"
    environment:
      KAFKA_REST_BOOTSTRAP_SERVERS: "PLAINTEXT://localhost:9092"
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082/"
      KAFKA_REST_HOST_NAME: "rest-proxy"
      KAFKA_REST_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_REST_SCHEMA_REGISTRY_URL: "http://schema-registry:8081/"
    depends_on:
    - "kafka"
    # - "kafka2"
    # - "kafka3"
    - "schema-registry"

  connect:
    image: confluentinc/cp-kafka-connect:5.2.2
    ports:
    - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "PLAINTEXT://localhost:9092"
      CONNECT_GROUP_ID: "connect"
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
      CONNECT_PLUGIN_PATH: "~/kafka/plugins"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_KEY_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-config"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offset"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
    depends_on:
    - "kafka"
    # - "kafka2"
    # - "kafka3"
    - "schema-registry"

  ksql:
    image: confluentinc/cp-ksql-server:5.2.2
    ports:
    - "8088:8088"
    environment:
      KSQL_BOOTSTRAP_SERVERS: "PLAINTEXT://localhost:9092"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_KSQL_SERVICE_ID: "ksql_service_docker"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081/"
    depends_on:
    - "kafka"
    # - "kafka2"
    # - "kafka3"
    - "schema-registry"

  connect-ui:
    image: landoop/kafka-connect-ui:0.9.7
    ports:
    - "8084:8084"
    environment:
      PORT: "8084"
      PROXY: "true"
      CONNECT_URL: "http://connect:8083"
    depends_on:
    - "connect"

  topics-ui:
    image: landoop/kafka-topics-ui:0.9.4
    ports:
    - "8085:8085"
    environment:
      PORT: "8085"
      PROXY: "true"
      KAFKA_REST_PROXY_URL: "http://rest-proxy:8082"
    depends_on:
    - "rest-proxy"

  schema-registry-ui:
    image: landoop/schema-registry-ui:0.9.5
    ports:
    - "8086:8086"
    environment:
      PORT: "8086"
      PROXY: "true"
      SCHEMAREGISTRY_URL: "http://schema-registry:8081/"
    depends_on:
    - "schema-registry"

  spark:
    image: docker.io/bitnami/spark:3
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "9090:8080"
      - "7077:7077"
    volumes:
        - bitnami-spark:/bitnami/spark

  spark-worker:
    image: docker.io/bitnami/spark:3
    depends_on:
      - spark
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=&Covport2022
      - POSTGRES_DB=railsdb
  
volumes:
  postgres-db-volume:
  bitnami-spark:


  # always specify the version of an image in docker 
  # kakfa internal is for communication between brokers
  # standalone
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:5.2.2
  #   ports:
  #   - "2181:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: "2181"


  